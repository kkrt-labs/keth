{%- set return_type = "" if not circuit.return_names|length else
    "-> " + (("(" if circuit.return_names|length > 1 else "") +
    circuit.return_names|join("*, ") +
    ("*)" if circuit.return_names|length > 1 else "*")) %}

{%- set return_data = "()" %}
{%- if circuit.return_offsets %}
    {%- set return_exprs = [] %}
    {%- for i in range(circuit.return_offsets|length) %}
        {%- set _ = return_exprs.append("cast(range_check96_ptr - " ~ circuit.return_offsets[circuit.return_offsets|length - 1 - i] ~ ", " ~ circuit.return_names[i] ~ "*)") %}
    {%- endfor %}
    {%- set return_data = ("(" if circuit.return_offsets|length > 1 else "") ~ return_exprs|join(", ") ~ (")" if circuit.return_offsets|length > 1 else "") %}
{%- endif %}

func {{name}}{range_check96_ptr: felt*, add_mod_ptr: ModBuiltin*, mul_mod_ptr: ModBuiltin*}(
    {%- for arg in circuit.args -%}
    {{ arg.name }}: {{ arg.type }}*{{ ", " if not loop.last else "" }}
    {%- endfor -%}, p: UInt384*
) {{return_type}} {
    let (_, pc) = get_fp_and_pc();

    pc_label:
    let add_mod_offsets_ptr = pc + (add_offsets - pc_label);
    let mul_mod_offsets_ptr = pc + (mul_offsets - pc_label);

    {# First iterate over constants #}
    {%- for value in circuit.constants %}
    assert [range_check96_ptr + {{loop.index0 * 4}}] = {{value[0]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 1}}] = {{value[1]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 2}}] = {{value[2]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 3}}] = {{value[3]}};
    {%- endfor %}

    {# Then iterate over arguments #}
    {%- set count = namespace(value=0) %}
    {%- for arg in circuit.args %}
        {%- for path in arg.path %}
    assert [range_check96_ptr + {{circuit.constants|length * 4 + count.value}}] = {{path}}.d0;
    assert [range_check96_ptr + {{circuit.constants|length * 4 + count.value + 1}}] = {{path}}.d1;
    assert [range_check96_ptr + {{circuit.constants|length * 4 + count.value + 2}}] = {{path}}.d2;
    assert [range_check96_ptr + {{circuit.constants|length * 4 + count.value + 3}}] = {{path}}.d3;
            {%- set count.value = count.value + 4 %}
        {%- endfor %}
    {%- endfor %}

    run_mod_p_circuit(
        p=[p],
        values_ptr=cast(range_check96_ptr, UInt384*),
        add_mod_offsets_ptr=add_mod_offsets_ptr,
        add_mod_n={{circuit.add_mod_n}},
        mul_mod_offsets_ptr=mul_mod_offsets_ptr,
        mul_mod_n={{circuit.mul_mod_n}},
    );

    let range_check96_ptr = range_check96_ptr + {{circuit.total_offset}};

    return {{return_data}};

    add_offsets:
    {%- for offset in circuit.add_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}

    mul_offsets:
    {%- for offset in circuit.mul_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}
}
