{%- set return_values = ["UInt384*"] * (circuit.return_data_size // 4) %}
{%- set return_type = "" if not return_values else
    "-> " + (("(" if return_values|length > 1 else "") +
    return_values|join(", ") +
    (")" if return_values|length > 1 else "")) %}

{%- set return_data = "()" %}
{%- if return_values %}
    {%- set return_exprs = [] %}
    {%- for i in range(circuit.return_data_size // 4)|reverse %}
        {%- set offset = 4 * (i + 1) %}
        {%- set _ = return_exprs.append("cast(range_check96_ptr - " ~ offset ~ ", UInt384*)") %}
    {%- endfor %}
    {%- set return_data = ("(" if return_values|length > 1 else "") ~ return_exprs|join(", ") ~ (")" if return_values|length > 1 else "") %}
{%- endif %}

func {{name}}{range_check96_ptr: felt*, add_mod_ptr: ModBuiltin*, mul_mod_ptr: ModBuiltin*}(
    {%- for member_name in args_struct.members -%}
    {{ member_name }}: UInt384*{{ ", " if not loop.last else "" }}
    {%- endfor -%}, p: UInt384*
) {{return_type}} {
    let (_, pc) = get_fp_and_pc();

    pc_label:
    let add_offsets_ptr = pc + (add_offsets - pc_label);
    let mul_offsets_ptr = pc + (mul_offsets - pc_label);

    {%- for member_name in args_struct.members %}
    assert [range_check96_ptr + {{loop.index0 * 4}}] = {{member_name}}.d0;
    assert [range_check96_ptr + {{loop.index0 * 4 + 1}}] = {{member_name}}.d1;
    assert [range_check96_ptr + {{loop.index0 * 4 + 2}}] = {{member_name}}.d2;
    assert [range_check96_ptr + {{loop.index0 * 4 + 3}}] = {{member_name}}.d3;
    {% endfor %}

    {%- if circuit.add_mod_n > 0 %}
    assert add_mod_ptr[0] = ModBuiltin(
        p=[p],
        values_ptr=cast(range_check96_ptr, UInt384*),
        offsets_ptr=add_offsets_ptr,
        n={{circuit.add_mod_n}},
    );
    {%- endif %}

    {%- if circuit.mul_mod_n > 0 %}
    assert mul_mod_ptr[0] = ModBuiltin(
        p=[p],
        values_ptr=cast(range_check96_ptr, UInt384*),
        offsets_ptr=mul_offsets_ptr,
        n={{circuit.mul_mod_n}},
    );
    {%- endif %}

    %{
        from starkware.cairo.lang.builtins.modulo.mod_builtin_runner import ModBuiltinRunner
        {% if circuit.add_mod_n > 0 %}
        assert builtin_runners["add_mod_builtin"].instance_def.batch_size == 1
        {%- endif -%}
        {% if circuit.mul_mod_n > 0 %}
        assert builtin_runners["mul_mod_builtin"].instance_def.batch_size == 1
        {%- endif %}

        ModBuiltinRunner.fill_memory(
            memory=memory,
            add_mod={{ "(ids.add_mod_ptr.address_, builtin_runners['add_mod_builtin'], " + circuit.add_mod_n|string + ")" if circuit.add_mod_n > 0 else "None" }},
            mul_mod={{ "(ids.mul_mod_ptr.address_, builtin_runners['mul_mod_builtin'], " + circuit.mul_mod_n|string + ")" if circuit.mul_mod_n > 0 else "None" }},
        )
    %}

    let range_check96_ptr = range_check96_ptr + {{circuit.total_offset}};
    {% if circuit.add_mod_n > 0 %}
    let add_mod_ptr = add_mod_ptr + ModBuiltin.SIZE * {{circuit.add_mod_n}};
    {% endif %}
    {%- if circuit.mul_mod_n > 0 -%}
    let mul_mod_ptr = mul_mod_ptr + ModBuiltin.SIZE * {{circuit.mul_mod_n}};
    {% endif %}
    return {{return_data}};

    add_offsets:
    {%- for offset in circuit.add_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}

    mul_offsets:
    {%- for offset in circuit.mul_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}
}
